!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/luguimar/Documents/42cursus_cub3D/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(LIBFT)	cub3D/Makefile	/^$(LIBFT):$/;"	t
$(NAME)	cub3D/Makefile	/^$(NAME): ${MLX_FILE} ${OBJS} ${LIBFT}$/;"	t
${MLX_FILE}	cub3D/Makefile	/^${MLX_FILE}:$/;"	t
${NAME}	cub3D/lib/libft/Makefile	/^${NAME}:	${OBJS}$/;"	t
.o	cub3D/lib/libft/Makefile	/^.o:.c$/;"	t
0	cub3D/.vscode/launch.json	/^                {$/;"	o	array:configurations.0.setupCommands
0	cub3D/.vscode/launch.json	/^            "args": ["sad_face.cub"],$/;"	s	array:configurations.0.args
0	cub3D/.vscode/launch.json	/^        {$/;"	o	array:configurations
0	cub3D/.vscode/tasks.json	/^                "$gcc"$/;"	s	array:tasks.1.problemMatcher
0	cub3D/.vscode/tasks.json	/^                "-fdiagnostics-color=always",$/;"	s	array:tasks.1.args
0	cub3D/.vscode/tasks.json	/^        {$/;"	o	array:tasks
1	cub3D/.vscode/tasks.json	/^                "-g",$/;"	s	array:tasks.1.args
1	cub3D/.vscode/tasks.json	/^        {$/;"	o	array:tasks
2	cub3D/.vscode/tasks.json	/^                "${file}",$/;"	s	array:tasks.1.args
3	cub3D/.vscode/tasks.json	/^                "-o",$/;"	s	array:tasks.1.args
4	cub3D/.vscode/tasks.json	/^                "${fileDirname}\/${fileBasenameNoExtension}"$/;"	s	array:tasks.1.args
42cursus_cub3d	README.md	/^# 42cursus_cub3d$/;"	c
A	cub3D/src/cub3d.h	/^	A = 97,$/;"	e	enum:e_key
BONUSFUNCTIONS	cub3D/lib/libft/Makefile	/^BONUSFUNCTIONS =	ft_lstnew.c ft_lstadd_front.c ft_lstsize.c ft_lstlast.c ft_lstadd_back.c ft_lst/;"	m
BONUSOBJS	cub3D/lib/libft/Makefile	/^BONUSOBJS =	${BONUSFUNCTIONS:.c=.o}$/;"	m
BUFFER_SIZE	cub3D/lib/libft/libft.h	/^#  define BUFFER_SIZE /;"	d
CC	cub3D/Makefile	/^CC = cc -g #-fsanitize=address$/;"	m
CC	cub3D/lib/libft/Makefile	/^CC =	cc -g$/;"	m
CFLAGS	cub3D/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CFLAGS	cub3D/lib/libft/Makefile	/^CFLAGS =	-Wall -Wextra -Werror$/;"	m
CUB3D_H	cub3D/src/cub3d.h	/^# define CUB3D_H$/;"	d
D	cub3D/src/cub3d.h	/^	D = 100,$/;"	e	enum:e_key
DOWNLOAD	cub3D/Makefile	/^DOWNLOAD = wget -O$/;"	m
ESC	cub3D/src/cub3d.h	/^	ESC = 65307,$/;"	e	enum:e_key
EXTRA	cub3D/lib/libft/Makefile	/^EXTRA = ft_printf.c ft_isu.c printfaux1.c printfaux2.c printfaux3.c get_next_line_utils.c ft_str/;"	m
EXTRACT	cub3D/Makefile	/^EXTRACT = tar -xvf$/;"	m
FT_PRINTF_H	cub3D/lib/libft/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
HEADER	cub3D/lib/libft/Makefile	/^HEADER =	libft.h$/;"	m
INCLUDE	cub3D/Makefile	/^INCLUDE = -I .$/;"	m
INCLUDE	cub3D/lib/libft/Makefile	/^INCLUDE =	-I .$/;"	m
LEFT	cub3D/src/cub3d.h	/^	LEFT = 65361,$/;"	e	enum:e_key
LIBFT	cub3D/Makefile	/^LIBFT = ${LIBFT_PATH}\/libft.a$/;"	m
LIBFT_H	cub3D/lib/libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_PATH	cub3D/Makefile	/^LIBFT_PATH = lib\/libft$/;"	m
LIBRARIES	cub3D/Makefile	/^LIBRARIES = lib$/;"	m
MAKE	cub3D/Makefile	/^MAKE = make -C$/;"	m
MIMode	cub3D/.vscode/launch.json	/^            "MIMode": "gdb",$/;"	s	object:configurations.0
MINILIBX_FILE	cub3D/Makefile	/^MINILIBX_FILE = minilibx-linux.tgz$/;"	m
MINILIBX_URL	cub3D/Makefile	/^MINILIBX_URL = https:\/\/cdn.intra.42.fr\/document\/document\/25858\/minilibx-linux.tgz$/;"	m
MLX	cub3D/Makefile	/^MLX = -L ${MLX_PATH} -lmlx -Ilmlx -lXext -lX11 -lm$/;"	m
MLX_FILE	cub3D/Makefile	/^MLX_FILE = ${MLX_PATH}\/libmlx.a$/;"	m
MLX_PATH	cub3D/Makefile	/^MLX_PATH = lib\/mlx$/;"	m
MOVE	cub3D/Makefile	/^MOVE = mv$/;"	m
NAME	cub3D/Makefile	/^NAME = cub3D$/;"	m
NAME	cub3D/lib/libft/Makefile	/^NAME =	libft.a$/;"	m
OBJS	cub3D/Makefile	/^OBJS = ${SRC:.c=.o}$/;"	m
OBJS	cub3D/lib/libft/Makefile	/^OBJS =	${SRC:.c=.o}$/;"	m
PART1	cub3D/lib/libft/Makefile	/^PART1 =	ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c ft_isascii.c ft_isdigit.c ft_isprint.c /;"	m
PART2	cub3D/lib/libft/Makefile	/^PART2 =	ft_itoa.c ft_split.c ft_substr.c ft_strjoin.c ft_strtrim.c ft_strmapi.c ft_striteri.c ft/;"	m
REMOVE	cub3D/Makefile	/^REMOVE = rm -f$/;"	m
RIGHT	cub3D/src/cub3d.h	/^	RIGHT = 65363,$/;"	e	enum:e_key
RM	cub3D/lib/libft/Makefile	/^RM =	rm -f$/;"	m
S	cub3D/src/cub3d.h	/^	S = 115,$/;"	e	enum:e_key
SRC	cub3D/Makefile	/^SRC = src\/parser\/main.c src\/parser\/parse.c src\/parser\/checker.c src\/parser\/map_parse.c s/;"	m
SRC	cub3D/lib/libft/Makefile	/^SRC =	${PART1} ${PART2} $(EXTRA)$/;"	m
W	cub3D/src/cub3d.h	/^	W = 119,$/;"	e	enum:e_key
addr	cub3D/src/cub3d.h	/^	char	*addr;$/;"	m	struct:s_img	typeref:typename:char *
algcount	cub3D/lib/libft/ft_isu.c	/^static int	algcount(unsigned int x)$/;"	f	typeref:typename:int	file:
algcount	cub3D/lib/libft/ft_itoa.c	/^static int	algcount(long int n, int isnega)$/;"	f	typeref:typename:int	file:
algcount	cub3D/lib/libft/ft_putnbr_fd.c	/^static int	algcount(int n)$/;"	f	typeref:typename:int	file:
algcount	cub3D/lib/libft/printfaux2.c	/^static int	algcount(unsigned int n)$/;"	f	typeref:typename:int	file:
algcount	cub3D/lib/libft/printfaux3.c	/^static int	algcount(unsigned long long n)$/;"	f	typeref:typename:int	file:
all	cub3D/Makefile	/^all: ${NAME}$/;"	t
all	cub3D/lib/libft/Makefile	/^all:	${NAME}$/;"	t
args	cub3D/.vscode/launch.json	/^            "args": ["sad_face.cub"],$/;"	a	object:configurations.0
args	cub3D/.vscode/tasks.json	/^            "args": [$/;"	a	object:tasks.1
bits_per_pixel	cub3D/src/cub3d.h	/^	int		bits_per_pixel;$/;"	m	struct:s_img	typeref:typename:int
bonus	cub3D/lib/libft/Makefile	/^bonus:	$(BONUSOBJS) $(OBJS)$/;"	t
caphex	cub3D/lib/libft/printfaux2.c	/^int	caphex(unsigned int n)$/;"	f	typeref:typename:int
ceiling	cub3D/src/cub3d.h	/^	int			ceiling[3];$/;"	m	struct:s_gs	typeref:typename:int[3]
ceiling	cub3D/src/cub3d.h	/^	int		ceiling[3];$/;"	m	struct:s_graphics	typeref:typename:int[3]
check_extension	cub3D/src/parser/main.c	/^static int	check_extension(char *str, char *ext)$/;"	f	typeref:typename:int	file:
check_format	cub3D/src/parser/parse.c	/^static int	check_format(char *line, t_gs *gs)$/;"	f	typeref:typename:int	file:
check_info	cub3D/src/parser/parse_utils.c	/^int	check_info(t_gs *gs)$/;"	f	typeref:typename:int
checkend	cub3D/lib/libft/ft_strtrim.c	/^int	checkend(char *str, char *set)$/;"	f	typeref:typename:int
checker	cub3D/src/parser/checker.c	/^int	checker(t_gs *gs)$/;"	f	typeref:typename:int
checkstart	cub3D/lib/libft/ft_strtrim.c	/^int	checkstart(char *str, char *set)$/;"	f	typeref:typename:int
checktype	cub3D/lib/libft/ft_printf.c	/^int	checktype(int i, va_list args)$/;"	f	typeref:typename:int
checkvalues	cub3D/src/parser/parse.c	/^static int	checkvalues(char **s, t_gs *gs, char c)$/;"	f	typeref:typename:int	file:
clean	cub3D/Makefile	/^clean:$/;"	t
clean	cub3D/lib/libft/Makefile	/^clean:$/;"	t
clean_stash	cub3D/lib/libft/get_next_line.c	/^static char	*clean_stash(char *stash)$/;"	f	typeref:typename:char *	file:
command	cub3D/.vscode/tasks.json	/^            "command": "\/usr\/bin\/gcc",$/;"	s	object:tasks.1
command	cub3D/.vscode/tasks.json	/^            "command": "make re",$/;"	s	object:tasks.0
configurations	cub3D/.vscode/launch.json	/^    "configurations": [$/;"	a
content	cub3D/lib/libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
convert	cub3D/lib/libft/ft_itoa.c	/^void	convert(char *str, long int n, int isnega)$/;"	f	typeref:typename:void
copyconvert	cub3D/src/parser/parse_utils.c	/^int	copyconvert(char **s, int *a)$/;"	f	typeref:typename:int
cube_render	cub3D/src/graphics/cube_render.c	/^void	cube_render(t_gs *game)$/;"	f	typeref:typename:void
cube_render_aux	cub3D/src/graphics/cube_render.c	/^static void	cube_render_aux(int *side, double *dir)$/;"	f	typeref:typename:void	file:
cube_render_aux2	cub3D/src/graphics/cube_render.c	/^static void	cube_render_aux2(int *side, double *dir)$/;"	f	typeref:typename:void	file:
cube_render_aux2_extra	cub3D/src/graphics/cube_render.c	/^static void	cube_render_aux2_extra(int *side, double *dir)$/;"	f	typeref:typename:void	file:
cube_render_aux_extra	cub3D/src/graphics/cube_render.c	/^static void	cube_render_aux_extra(int *side, double *dir)$/;"	f	typeref:typename:void	file:
cwd	cub3D/.vscode/launch.json	/^            "cwd": "${workspaceFolder}",$/;"	s	object:configurations.0
cwd	cub3D/.vscode/tasks.json	/^                "cwd": "${fileDirname}"$/;"	s	object:tasks.1.options
decimal	cub3D/src/cub3d.h	/^	double	decimal;$/;"	m	struct:s_putline	typeref:typename:double
deinitialize	cub3D/src/parser/deinitialize.c	/^void	deinitialize(t_gs *gs)$/;"	f	typeref:typename:void
deinitialize_aux	cub3D/src/parser/deinitialize.c	/^static void	deinitialize_aux(t_gs *gs)$/;"	f	typeref:typename:void	file:
delta_x	cub3D/src/cub3d.h	/^	double	delta_x;$/;"	m	struct:s_putline	typeref:typename:double
delta_y	cub3D/src/cub3d.h	/^	double	delta_y;$/;"	m	struct:s_putline	typeref:typename:double
description	cub3D/.vscode/launch.json	/^                    "description": "Enable pretty-printing for gdb",$/;"	s	object:configurations.0.setupCommands.0
detail	cub3D/.vscode/tasks.json	/^            "detail": "Task generated by Debugger."$/;"	s	object:tasks.1
dir	cub3D/src/cub3d.h	/^	double	dir;$/;"	m	struct:s_player	typeref:typename:double
dist2wall	cub3D/src/cub3d.h	/^	double	dist2wall;$/;"	m	struct:s_putline	typeref:typename:double
doublefree	cub3D/lib/libft/doublefree.c	/^void	doublefree(char **str)$/;"	f	typeref:typename:void
e_key	cub3D/src/cub3d.h	/^typedef enum e_key$/;"	g
ea	cub3D/src/cub3d.h	/^	t_img	ea;$/;"	m	struct:s_graphics	typeref:typename:t_img
ea_t	cub3D/src/cub3d.h	/^	char		*ea_t;$/;"	m	struct:s_gs	typeref:typename:char *
endian	cub3D/src/cub3d.h	/^	int		endian;$/;"	m	struct:s_img	typeref:typename:int
error_msg	cub3D/src/graphics/graphics.c	/^int	error_msg(char *msg, int ret)$/;"	f	typeref:typename:int
externalConsole	cub3D/.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.0
fclean	cub3D/Makefile	/^fclean: clean$/;"	t
fclean	cub3D/lib/libft/Makefile	/^fclean:	clean$/;"	t
files.associations	cub3D/src/.vscode/settings.json	/^    "files.associations": {$/;"	o
fillvec	cub3D/lib/libft/ft_split.c	/^void	fillvec(char *s, char **str, char c)$/;"	f	typeref:typename:void
flood_fill	cub3D/src/parser/checker.c	/^static int	flood_fill(t_gs *gs, int x, int y, char **map)$/;"	f	typeref:typename:int	file:
floor	cub3D/src/cub3d.h	/^	int			floor[3];$/;"	m	struct:s_gs	typeref:typename:int[3]
floor	cub3D/src/cub3d.h	/^	int		floor[3];$/;"	m	struct:s_graphics	typeref:typename:int[3]
ft_atoi	cub3D/lib/libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_atol	cub3D/lib/libft/ft_atol.c	/^long	ft_atol(const char *str)$/;"	f	typeref:typename:long
ft_av	cub3D/lib/libft/ft_av.c	/^int	ft_av(int n)$/;"	f	typeref:typename:int
ft_bzero	cub3D/lib/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	cub3D/lib/libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_gnlstrjoin	cub3D/lib/libft/get_next_line_utils.c	/^char	*ft_gnlstrjoin(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_isalnum	cub3D/lib/libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	cub3D/lib/libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	cub3D/lib/libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_ischar	cub3D/lib/libft/printfaux1.c	/^int	ft_ischar(char c)$/;"	f	typeref:typename:int
ft_isdigit	cub3D/lib/libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isint	cub3D/lib/libft/printfaux1.c	/^int	ft_isint(int n)$/;"	f	typeref:typename:int
ft_ispointer	cub3D/lib/libft/printfaux3.c	/^int	ft_ispointer(unsigned long long n)$/;"	f	typeref:typename:int
ft_isprint	cub3D/lib/libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isstring	cub3D/lib/libft/printfaux1.c	/^int	ft_isstring(char *str)$/;"	f	typeref:typename:int
ft_isu	cub3D/lib/libft/ft_isu.c	/^int	ft_isu(unsigned int n)$/;"	f	typeref:typename:int
ft_itoa	cub3D/lib/libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	cub3D/lib/libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	cub3D/lib/libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	cub3D/lib/libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	cub3D/lib/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	cub3D/lib/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	cub3D/lib/libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	cub3D/lib/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	cub3D/lib/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	cub3D/lib/libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_matlen	cub3D/lib/libft/ft_strlen.c	/^size_t	ft_matlen(char **s)$/;"	f	typeref:typename:size_t
ft_memchr	cub3D/lib/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	cub3D/lib/libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	cub3D/lib/libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	cub3D/lib/libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	cub3D/lib/libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_perror	cub3D/src/parser/main.c	/^void	ft_perror(char *str, int fd, t_gs *gs)$/;"	f	typeref:typename:void
ft_printf	cub3D/lib/libft/ft_printf.c	/^int	ft_printf(const char *str, ...)$/;"	f	typeref:typename:int
ft_putchar	cub3D/lib/libft/printfaux2.c	/^static void	ft_putchar(char c)$/;"	f	typeref:typename:void	file:
ft_putchar	cub3D/lib/libft/printfaux3.c	/^static void	ft_putchar(char c)$/;"	f	typeref:typename:void	file:
ft_putchar_fd	cub3D/lib/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	cub3D/lib/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_puthex	cub3D/lib/libft/printfaux2.c	/^int	ft_puthex(unsigned int nb, char *base)$/;"	f	typeref:typename:int
ft_putnbr_fd	cub3D/lib/libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putp	cub3D/lib/libft/printfaux3.c	/^int	ft_putp(unsigned long long n)$/;"	f	typeref:typename:int
ft_putstr_fd	cub3D/lib/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_split	cub3D/lib/libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	cub3D/lib/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strdup	cub3D/lib/libft/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f	typeref:typename:char *
ft_striteri	cub3D/lib/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f	typeref:typename:void
ft_strjoin	cub3D/lib/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strjoinfree	cub3D/lib/libft/ft_strjoin.c	/^char	*ft_strjoinfree(char *s1, char *s2, int type)$/;"	f	typeref:typename:char *
ft_strlcat	cub3D/lib/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	cub3D/lib/libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	cub3D/lib/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f	typeref:typename:size_t
ft_strlenplus	cub3D/lib/libft/get_next_line_utils.c	/^int	ft_strlenplus(char *s, char c)$/;"	f	typeref:typename:int
ft_strmapi	cub3D/lib/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	cub3D/lib/libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	cub3D/lib/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	cub3D/lib/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f	typeref:typename:char *
ft_strstr	cub3D/lib/libft/ft_strstr.c	/^char	*ft_strstr(char *str, char *to_find)$/;"	f	typeref:typename:char *
ft_strtrim	cub3D/lib/libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_strtrimfree	cub3D/lib/libft/ft_strtrim.c	/^char	*ft_strtrimfree(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	cub3D/lib/libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	cub3D/lib/libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	cub3D/lib/libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_wc	cub3D/lib/libft/ft_split.c	/^int	ft_wc(char *str, char c)$/;"	f	typeref:typename:int
ft_ws	cub3D/lib/libft/ft_split.c	/^int	ft_ws(char *s, char c, int *jj)$/;"	f	typeref:typename:int
get_color	cub3D/src/graphics/renders.c	/^int	get_color(t_gs *game, t_putline vars, double z)$/;"	f	typeref:typename:int
get_color_extra	cub3D/src/graphics/renders.c	/^int	get_color_extra(t_gs *game, t_putline vars, double z)$/;"	f	typeref:typename:int
get_dir	cub3D/src/graphics/positions.c	/^double	get_dir(char c)$/;"	f	typeref:typename:double
get_line	cub3D/lib/libft/get_next_line.c	/^static char	*get_line(char *stash, int eof)$/;"	f	typeref:typename:char *	file:
get_next_line	cub3D/lib/libft/get_next_line.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_player_dir	cub3D/src/graphics/positions.c	/^void	get_player_dir(t_gs *game)$/;"	f	typeref:typename:void
get_player_position	cub3D/src/graphics/positions.c	/^void	get_player_position(t_gs *game)$/;"	f	typeref:typename:void
get_side	cub3D/src/graphics/positions.c	/^int	get_side(char c)$/;"	f	typeref:typename:int
get_stash	cub3D/lib/libft/get_next_line.c	/^static char	*get_stash(int fd, char *stash, int *eof)$/;"	f	typeref:typename:char *	file:
graphics	cub3D/src/cub3d.h	/^	t_graphics	graphics;$/;"	m	struct:s_gs	typeref:typename:t_graphics
group	cub3D/.vscode/tasks.json	/^            "group": "build",$/;"	s	object:tasks.0
group	cub3D/.vscode/tasks.json	/^            "group": {$/;"	o	object:tasks.1
gs_init	cub3D/src/parser/main.c	/^static t_gs	*gs_init(void)$/;"	f	typeref:typename:t_gs *	file:
height	cub3D/src/cub3d.h	/^	int		height;$/;"	m	struct:s_img	typeref:typename:int
ignoreFailures	cub3D/.vscode/launch.json	/^                    "ignoreFailures": true$/;"	b	object:configurations.0.setupCommands.0
img	cub3D/src/cub3d.h	/^	t_img	img;$/;"	m	struct:s_graphics	typeref:typename:t_img
img	cub3D/src/cub3d.h	/^	void	*img;$/;"	m	struct:s_img	typeref:typename:void *
init_img	cub3D/src/graphics/graphics.c	/^int	init_img(t_img *img, void *mlx, int width, int height)$/;"	f	typeref:typename:int
integer	cub3D/src/cub3d.h	/^	double	integer;$/;"	m	struct:s_putline	typeref:typename:double
intercept_x	cub3D/src/cub3d.h	/^	double	intercept_x;$/;"	m	struct:s_putline	typeref:typename:double
intercept_y	cub3D/src/cub3d.h	/^	double	intercept_y;$/;"	m	struct:s_putline	typeref:typename:double
isDefault	cub3D/.vscode/tasks.json	/^                "isDefault": true$/;"	b	object:tasks.1.group
is_valid	cub3D/src/parser/main.c	/^static void	is_valid(char *f, t_gs *gs)$/;"	f	typeref:typename:void	file:
j	cub3D/src/cub3d.h	/^	int		j;$/;"	m	struct:s_putline	typeref:typename:int
key_hook	cub3D/src/graphics/moves.c	/^int	key_hook(int keycode, t_gs *game)$/;"	f	typeref:typename:int
keycode_a	cub3D/src/graphics/move.c	/^static void	keycode_a(t_gs *game, double *new_x, double *new_y)$/;"	f	typeref:typename:void	file:
keycode_d	cub3D/src/graphics/move.c	/^static void	keycode_d(t_gs *game, double *new_x, double *new_y)$/;"	f	typeref:typename:void	file:
keycode_left	cub3D/src/graphics/moves.c	/^void	keycode_left(t_gs *game)$/;"	f	typeref:typename:void
keycode_left_extra	cub3D/src/graphics/moves.c	/^void	keycode_left_extra(t_gs *game)$/;"	f	typeref:typename:void
keycode_right	cub3D/src/graphics/moves.c	/^void	keycode_right(t_gs *game)$/;"	f	typeref:typename:void
keycode_right_extra	cub3D/src/graphics/moves.c	/^void	keycode_right_extra(t_gs *game)$/;"	f	typeref:typename:void
keycode_s	cub3D/src/graphics/move.c	/^static void	keycode_s(t_gs *game, double *new_x, double *new_y)$/;"	f	typeref:typename:void	file:
keycode_w	cub3D/src/graphics/move.c	/^static void	keycode_w(t_gs *game, double *new_x, double *new_y)$/;"	f	typeref:typename:void	file:
kind	cub3D/.vscode/tasks.json	/^                "kind": "build",$/;"	s	object:tasks.1.group
label	cub3D/.vscode/tasks.json	/^            "label": "C\/C++: gcc build active file",$/;"	s	object:tasks.1
label	cub3D/.vscode/tasks.json	/^            "label": "make",$/;"	s	object:tasks.0
length_aux	cub3D/src/parser/map_parse.c	/^static int	length_aux(char *s, t_gs *gs)$/;"	f	typeref:typename:int	file:
line_length	cub3D/src/cub3d.h	/^	int		line_length;$/;"	m	struct:s_img	typeref:typename:int
line_size	cub3D/src/cub3d.h	/^	double	line_size;$/;"	m	struct:s_putline	typeref:typename:double
lowhex	cub3D/lib/libft/printfaux2.c	/^int	lowhex(unsigned int n)$/;"	f	typeref:typename:int
main	cub3D/src/parser/main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
map	cub3D/src/cub3d.h	/^	char		**map;$/;"	m	struct:s_gs	typeref:typename:char **
map_init	cub3D/src/parser/map_parse.c	/^static void	map_init(t_gs *gs)$/;"	f	typeref:typename:void	file:
map_render	cub3D/src/graphics/renders.c	/^int	map_render(t_gs *game)$/;"	f	typeref:typename:int
map_start	cub3D/src/parser/map_parse.c	/^int	map_start(int fd, t_gs *gs, char *f)$/;"	f	typeref:typename:int
map_write	cub3D/src/parser/map_parse.c	/^static int	map_write(t_gs *gs, char *f)$/;"	f	typeref:typename:int	file:
miDebuggerPath	cub3D/.vscode/launch.json	/^            "miDebuggerPath": "\/usr\/bin\/gdb"$/;"	s	object:configurations.0
minimap_render_aux	cub3D/src/graphics/minimap.c	/^static void	minimap_render_aux(t_gs *game, int i)$/;"	f	typeref:typename:void	file:
minimap_render_aux_aux	cub3D/src/graphics/minimap.c	/^static void	minimap_render_aux_aux(t_gs *game, int i, int j)$/;"	f	typeref:typename:void	file:
minimap_render_aux_aux_aux	cub3D/src/graphics/minimap.c	/^static void	minimap_render_aux_aux_aux(t_gs *game, int i, int j, int color)$/;"	f	typeref:typename:void	file:
minimaprender	cub3D/src/graphics/minimap.c	/^int	minimaprender(t_gs *game)$/;"	f	typeref:typename:int
mlx	cub3D/src/cub3d.h	/^	void	*mlx;$/;"	m	struct:s_graphics	typeref:typename:void *
mlx.h	cub3D/src/.vscode/settings.json	/^        "mlx.h": "c",$/;"	s	object:files.associations
mlx_close	cub3D/src/graphics/graphics.c	/^int	mlx_close(t_gs *game)$/;"	f	typeref:typename:int
mlx_start	cub3D/src/graphics/graphics.c	/^void	mlx_start(t_gs *game)$/;"	f	typeref:typename:void
move	cub3D/src/graphics/move.c	/^int	move(int keycode, t_gs *game)$/;"	f	typeref:typename:int
my_pixel_put	cub3D/src/graphics/positions.c	/^void	my_pixel_put(t_img *img, int x, int y, int color)$/;"	f	typeref:typename:void
name	cub3D/.vscode/launch.json	/^            "name": "MINISHELL",$/;"	s	object:configurations.0
next	cub3D/lib/libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
no	cub3D/src/cub3d.h	/^	t_img	no;$/;"	m	struct:s_graphics	typeref:typename:t_img
no_t	cub3D/src/cub3d.h	/^	char		*no_t;$/;"	m	struct:s_gs	typeref:typename:char *
options	cub3D/.vscode/tasks.json	/^            "options": {$/;"	o	object:tasks.1
orientation	cub3D/src/cub3d.h	/^	int		orientation;$/;"	m	struct:s_putline	typeref:typename:int
panel	cub3D/.vscode/tasks.json	/^                "panel": "new"$/;"	s	object:tasks.0.presentation
parallel_dir	cub3D/src/cub3d.h	/^	double	parallel_dir;$/;"	m	struct:s_putline	typeref:typename:double
parallel_oo	cub3D/src/cub3d.h	/^	double	parallel_oo;$/;"	m	struct:s_putline	typeref:typename:double
parallel_side	cub3D/src/cub3d.h	/^	double	parallel_side;$/;"	m	struct:s_putline	typeref:typename:double
parallel_slope	cub3D/src/cub3d.h	/^	double	parallel_slope;$/;"	m	struct:s_putline	typeref:typename:double
parser	cub3D/src/parser/parse.c	/^int	parser(char *f, t_gs *gs)$/;"	f	typeref:typename:int
perp_dir	cub3D/src/cub3d.h	/^	double	perp_dir;$/;"	m	struct:s_putline	typeref:typename:double
perp_oo	cub3D/src/cub3d.h	/^	double	perp_oo;$/;"	m	struct:s_putline	typeref:typename:double
perp_side	cub3D/src/cub3d.h	/^	double	perp_side;$/;"	m	struct:s_putline	typeref:typename:double
perp_slope	cub3D/src/cub3d.h	/^	double	perp_slope;$/;"	m	struct:s_putline	typeref:typename:double
player	cub3D/src/cub3d.h	/^	t_player	player;$/;"	m	struct:s_gs	typeref:typename:t_player
player_check	cub3D/src/parser/checker.c	/^static int	player_check(t_gs *gs, int i, int j)$/;"	f	typeref:typename:int	file:
playerp	cub3D/src/cub3d.h	/^	t_position	*playerp;$/;"	m	struct:s_gs	typeref:typename:t_position *
playerrender	cub3D/src/graphics/renders.c	/^void	playerrender(t_gs *game)$/;"	f	typeref:typename:void
presentation	cub3D/.vscode/tasks.json	/^            "presentation": {$/;"	o	object:tasks.0
problemMatcher	cub3D/.vscode/tasks.json	/^            "problemMatcher": [$/;"	a	object:tasks.1
program	cub3D/.vscode/launch.json	/^            "program": "${workspaceFolder}\/cub3D",$/;"	s	object:configurations.0
put_line	cub3D/src/graphics/put_line.c	/^void	put_line(t_gs *game, double dir, int side, int i)$/;"	f	typeref:typename:void
put_line_aux	cub3D/src/graphics/put_line.c	/^void	put_line_aux(int side, t_putline *vars)$/;"	f	typeref:typename:void
put_line_aux_extra	cub3D/src/graphics/put_line.c	/^void	put_line_aux_extra(int side, t_putline *vars)$/;"	f	typeref:typename:void
put_line_side0	cub3D/src/graphics/put_line_case_sides.c	/^void	put_line_side0(t_gs *game, t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side0_aux	cub3D/src/graphics/put_line_case_sides.c	/^void	put_line_side0_aux(t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side1	cub3D/src/graphics/put_line_case_sides1.c	/^void	put_line_side1(t_gs *game, t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side1_aux	cub3D/src/graphics/put_line_case_sides.c	/^void	put_line_side1_aux(t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side2	cub3D/src/graphics/put_line_case_sides1.c	/^void	put_line_side2(t_gs *game, t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side2_aux	cub3D/src/graphics/put_line_case_sides1.c	/^void	put_line_side2_aux(t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side3	cub3D/src/graphics/put_line_case_sides1.c	/^void	put_line_side3(t_gs *game, t_putline *vars, double dir)$/;"	f	typeref:typename:void
put_line_side3_aux	cub3D/src/graphics/put_line_case_sides1.c	/^void	put_line_side3_aux(t_putline *vars, double dir)$/;"	f	typeref:typename:void
raw	cub3D/src/cub3d.h	/^	char		**raw;$/;"	m	struct:s_gs	typeref:typename:char **
re	cub3D/Makefile	/^re: fclean all$/;"	t
re	cub3D/lib/libft/Makefile	/^re:	fclean all$/;"	t
request	cub3D/.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.0
reveal	cub3D/.vscode/tasks.json	/^                "reveal": "always",$/;"	s	object:tasks.0.presentation
rgb_format	cub3D/src/parser/parse.c	/^static int	rgb_format(char *s, t_gs *gs)$/;"	f	typeref:typename:int	file:
rgbtohex	cub3D/src/parser/parse_utils.c	/^unsigned int	rgbtohex(int *rgb)$/;"	f	typeref:typename:unsigned int
rstr	cub3D/lib/libft/ft_itoa.c	/^void	rstr(char *str, int size)$/;"	f	typeref:typename:void
runitdown	cub3D/src/parser/parse_utils.c	/^void	runitdown(int fd, char *line)$/;"	f	typeref:typename:void
s_graphics	cub3D/src/cub3d.h	/^typedef struct s_graphics$/;"	s
s_gs	cub3D/src/cub3d.h	/^typedef struct s_gs$/;"	s
s_img	cub3D/src/cub3d.h	/^typedef struct s_img$/;"	s
s_list	cub3D/lib/libft/libft.h	/^typedef struct s_list$/;"	s
s_player	cub3D/src/cub3d.h	/^typedef struct s_player$/;"	s
s_position	cub3D/src/cub3d.h	/^typedef struct s_position$/;"	s
s_putline	cub3D/src/cub3d.h	/^typedef struct s_putline$/;"	s
set_image	cub3D/src/graphics/set_image.c	/^int	set_image(t_gs *game, char *path, int i)$/;"	f	typeref:typename:int
set_image0	cub3D/src/graphics/set_image.c	/^int	set_image0(t_gs *game, char *path)$/;"	f	typeref:typename:int
set_image1	cub3D/src/graphics/set_image.c	/^int	set_image1(t_gs *game, char *path)$/;"	f	typeref:typename:int
set_image2	cub3D/src/graphics/set_image.c	/^int	set_image2(t_gs *game, char *path)$/;"	f	typeref:typename:int
set_image3	cub3D/src/graphics/set_image.c	/^int	set_image3(t_gs *game, char *path)$/;"	f	typeref:typename:int
set_mlx_images	cub3D/src/graphics/graphics.c	/^int	set_mlx_images(t_gs *game)$/;"	f	typeref:typename:int
setupCommands	cub3D/.vscode/launch.json	/^            "setupCommands": [$/;"	a	object:configurations.0
side	cub3D/src/cub3d.h	/^	int		side;$/;"	m	struct:s_player	typeref:typename:int
so	cub3D/src/cub3d.h	/^	t_img	so;$/;"	m	struct:s_graphics	typeref:typename:t_img
so_t	cub3D/src/cub3d.h	/^	char		*so_t;$/;"	m	struct:s_gs	typeref:typename:char *
stdlib.h	cub3D/src/.vscode/settings.json	/^        "stdlib.h": "c"$/;"	s	object:files.associations
stopAtEntry	cub3D/.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.0
strfill	cub3D/src/parser/map_parse.c	/^static void	strfill(char c, char *tofill, int len)$/;"	f	typeref:typename:void	file:
t_access	cub3D/src/parser/parse_utils.c	/^int	t_access(char *s, char **d)$/;"	f	typeref:typename:int
t_format	cub3D/src/parser/parse.c	/^static int	t_format(char *s, t_gs *gs)$/;"	f	typeref:typename:int	file:
t_graphics	cub3D/src/cub3d.h	/^}	t_graphics;$/;"	t	typeref:struct:s_graphics
t_gs	cub3D/src/cub3d.h	/^}				t_gs;$/;"	t	typeref:struct:s_gs
t_img	cub3D/src/cub3d.h	/^}	t_img;$/;"	t	typeref:struct:s_img
t_key	cub3D/src/cub3d.h	/^}	t_key;$/;"	t	typeref:enum:e_key
t_list	cub3D/lib/libft/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_player	cub3D/src/cub3d.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_position	cub3D/src/cub3d.h	/^}	t_position;$/;"	t	typeref:struct:s_position
t_putline	cub3D/src/cub3d.h	/^}	t_putline;$/;"	t	typeref:struct:s_putline
tasks	cub3D/.vscode/tasks.json	/^    "tasks": [$/;"	a
text	cub3D/.vscode/launch.json	/^                    "text": "-enable-pretty-printing",$/;"	s	object:configurations.0.setupCommands.0
tl	cub3D/src/cub3d.h	/^	int			tl;$/;"	m	struct:s_gs	typeref:typename:int
type	cub3D/.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.0
type	cub3D/.vscode/tasks.json	/^            "type": "cppbuild",$/;"	s	object:tasks.1
type	cub3D/.vscode/tasks.json	/^            "type": "shell",$/;"	s	object:tasks.0
vars_init	cub3D/src/graphics/put_line_case_sides.c	/^void	vars_init(t_putline *vars, t_gs *game)$/;"	f	typeref:typename:void
vars_init2	cub3D/src/graphics/put_line_case_sides.c	/^void	vars_init2(t_putline *vars, t_gs *game)$/;"	f	typeref:typename:void
version	cub3D/.vscode/launch.json	/^    "version": "0.2.0",$/;"	s
version	cub3D/.vscode/tasks.json	/^    "version": "2.0.0",$/;"	s
wall_check	cub3D/src/parser/checker.c	/^static int	wall_check(t_gs *gs)$/;"	f	typeref:typename:int	file:
we	cub3D/src/cub3d.h	/^	t_img	we;$/;"	m	struct:s_graphics	typeref:typename:t_img
we_t	cub3D/src/cub3d.h	/^	char		*we_t;$/;"	m	struct:s_gs	typeref:typename:char *
width	cub3D/src/cub3d.h	/^	int		width;$/;"	m	struct:s_img	typeref:typename:int
win	cub3D/src/cub3d.h	/^	void	*win;$/;"	m	struct:s_graphics	typeref:typename:void *
x	cub3D/src/cub3d.h	/^	double	x;$/;"	m	struct:s_player	typeref:typename:double
x	cub3D/src/cub3d.h	/^	double	x;$/;"	m	struct:s_position	typeref:typename:double
x	cub3D/src/cub3d.h	/^	double	x;$/;"	m	struct:s_putline	typeref:typename:double
xlen	cub3D/src/cub3d.h	/^	int			xlen;$/;"	m	struct:s_gs	typeref:typename:int
y	cub3D/src/cub3d.h	/^	double	y;$/;"	m	struct:s_player	typeref:typename:double
y	cub3D/src/cub3d.h	/^	double	y;$/;"	m	struct:s_position	typeref:typename:double
y	cub3D/src/cub3d.h	/^	double	y;$/;"	m	struct:s_putline	typeref:typename:double
ylen	cub3D/src/cub3d.h	/^	int			ylen;$/;"	m	struct:s_gs	typeref:typename:int
